generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id               String          @id @default(uuid())
  email            String          @unique
  name             String
  currentChallenge String?
  password         Password?
  events           Event[]
  authenticators   Authenticator[]
  user_groups      UserGroup[]
}

model Password {
  id     String @id @default(uuid())
  userId String @unique
  hash   String
  user   User   @relation(fields: [userId], references: [id])
}

model Authenticator {
  id                   String  @id @default(uuid())
  userId               String
  credentialID         String  @db.Text
  credentialPublicKey  Bytes
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  user                 User    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Group {
  id          String       @id @default(uuid())
  name        String
  description String       @db.Text
  imgAlt      String?
  imgUrl      String?
  events      Event[]
  user_groups UserGroup[]
}

model UserGroup {
  userId  String
  groupId String
  role    Role
  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
  @@index([groupId, userId])
}

model Event {
  id          String   @id @default(uuid())
  name        String
  date        DateTime
  description String   @db.Text
  groupId     String
  imgAlt      String?
  imgUrl      String?
  location    String?
  group       Group    @relation(fields: [groupId], references: [id])
  users       User[]

  @@index([groupId], map: "groupId")
}

enum Role {
  ADMIN
  USER
  APPLICANT
}
